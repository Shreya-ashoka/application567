#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100
#define INF 999999

struct Edge {
    int src, dest, weight;
};

struct Graph {
    int V, E;
    struct Edge edges[MAX_VERTICES];
};

int primMST(struct Graph* graph);

int main() {
    struct Graph graph;
    int numLocations, numConnections;

    printf("Enter the number of locations: ");
    scanf("%d", &numLocations);
    printf("Enter the number of connections: ");
    scanf("%d", &numConnections);

    graph.V = numLocations;
    graph.E = numConnections;

    printf("Enter connections (src dest weight):\n");
    for (int i = 0; i < numConnections; i++) {
        scanf("%d %d %d", &graph.edges[i].src, &graph.edges[i].dest, &graph.edges[i].weight);
    }

    int minCost = primMST(&graph);
    printf("Minimum Cost of Infrastructure Development: %d\n", minCost);

    return 0;
}

int primMST(struct Graph* graph) {
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    bool mstSet[MAX_VERTICES];

    for (int i = 0; i < graph->V; i++) {
        key[i] = INF;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < graph->V - 1; count++) {
        int u = -1;
        for (int v = 0; v < graph->V; v++) {
            if (!mstSet[v] && (u == -1 || key[v] < key[u])) {
                u = v;
            }
        }

        mstSet[u] = true;

        for (int v = 0; v < graph->V; v++) {
            if (!mstSet[v] && graph->edges[u].weight < key[v]) {
                parent[v] = u;
                key[v] = graph->edges[u].weight;
            }
        }
    }

    int minCost = 0;
    for (int i = 1; i < graph->V; i++) {
        minCost += graph->edges[i].weight;
    }

    return minCost;
}
